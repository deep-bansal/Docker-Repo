----------------------------------------------------------
Why volume specified in docker file like this didn't work
----------------------------------------------------------
VOLUME [ "/app/feedback" ]

doesn't work, it is anonymous volume
it creates a volume which exist until we don't remove container 
from the machine until then only it exist

-----------------
Named Containers
-----------------
they stay persistent all the time even if container is removed

docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

-v tag -> specifies volume
feedback:/app/feedback -> named volume (name:path_in_container)

----------------
volumes
----------------
docker volume ls -> to see all the volumes present

-------------
Bind Mounts
-------------
Take care that docker desktop is allowed access to file system by going in settings -> resources

docker run -p 3000:80 --rm --name feedback-app -d (-v feedback2:/app/feedback) named volume making
command to be written (-v ${pwd}:/app") added this now also to do bind mounting feedback-node:volumes
 
<---- when we run this command it says express not found means dependency missing 
but earlier with volumes working fine means something happend when we added bind mounts,this is because
we don't have node_modules folder in our local host and we bind_mount it to container then it replaces
it ---->

this is one command
(docker run -d --rm -p 3000:80  --name feedback-app 
-v feedback:/app/feedback (named volume for persistent data even if container removed)
#-v "$(pwd):/app" (bind mount for code changes)
-v /app/node_modules (anonymous volume that saves all folders inside container to be overwritten 
by bind mount) feedback-node:volumes)

<---- in bind mounts docker doesn't overwrite local host machine but vice versa true ---->

---------------------------
read-only volume/bind mount
---------------------------
volume_name or bind_mount :path_in_container:ro (read_only)

-----------------------
managing volume
------------------------
docker volume create to create a volume from localhost

-----------------
.dockerignore
------------------

------------------
env variables
------------------
docker run -d --rm -p 3000:8000 
--env PORT=8000( this helps to change the port without rebuilding image again  )
--name feedback-app -v feedback:/app/feedback 
-v "$(pwd):/app" -v /app/node_modules feedback-node:volumes


docker run -d --rm -p 3000:8000 
--env-file ./.env ( this helps to specify file for environment variables  )
--name feedback-app -v feedback:/app/feedback 
-v "$(pwd):/app" -v /app/node_modules feedback-node:volumes

-------------------
build time ARGs
-------------------
environment variables are given when we want to run container with custom inputs 
build time arguments are provided when we want to build image with custom inputs 

docker build -t feedback-node:dev --build-arg DEFAULT_PORT=80
helpful when we want to built different images from same dockerfile with minor changes

rebuilt take place after providing --env and --build-arg so place them as low as possible