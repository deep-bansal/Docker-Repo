apiVersion: v1
kind: Service # Type of the Kubernetes object
metadata: # Metadata of the service
  name: backend # Name of the service
spec: # Specification of the service
  selector: # Selector of the service
    app: second-app # Label of the pod to be controlled
  ports: # Ports of the service
    - protocol: TCP # Protocol of the port
      port: 80 # Port number of the service
      targetPort: 8080 # Target port number inside the pod
  type: NodePort # Type of the service

---
apiVersion: apps/v1 # Version of the Kubernetes API check from the official documentation
kind: Deployment # Type of the Kubernetes object
metadata: # Metadata of the object
  name: second-app # Name of the object
  
spec: # Specification of the object
  replicas: 1 # Number of replicas of the pod
  selector: # Selector of the pod
    matchLabels: # Match labels of the pod
      app: second-app # Label of the pod to be controlled
    # matchExpressions: # Match expressions of the pod
      # - {key: app, operator: In, values: [second-app,first-app]}

  template: # like we specified image in imperative approach
    # kind: Pod # Type of the object no need to write because template of deployment is always pod

    metadata: # Metadata of the pod
      labels: # Labels of the pod
        app: second-app # Label of the pod (key and value are our choice key can be anything)
        # key: value a pod can have multiple labels
        # can be connected to different object using labels
    spec: # Specification of the pod
      containers: # Containers of the pod
        - name: second-node
          image: deep04bansal/kub-first-app:2 # Image of the container
        # -name: .....
        #   image: ....
